# Offpost - Application to interact with public entities using email

## Norwegian description of service
(kept in sync with README.md in the root directory)

Offpost - Offentlig post - er en tjeneste for å sende e-post til offentlige myndigheter.

Tjenesten baserer seg på at man lager en forespørsel til en myndighet. Denne får en unik profil med tilfeldig navn og epost. Eposten brukes for å sende e-post og å motta svar. De tilfeldige navnene baserer seg på Motorvognregisteret, så det er ekte navn men kombinasjonen av fornavn og etternavn er sannsnyligvis unik siden navene ikke er vektet.

## Architecture
(kept in sync with README.md in the root directory)

Offpost is mainly a PHP application running on a web server. It revolves around email threads sent to public entities.

One email thread is a conversation between the system and a public entity. Or mulitple in case of a complaint.
Connected to the thread is a profile of first name, last name and email address. This is unique for each thread.

It uses IMAP to get emails from a mail server and store them in local storage. The emails are sorted into threads
based on the to/from addresses that matches the profile of the thread.

## Components
(kept in sync with README.md in the root directory)

### Organizer
- Main program that provides client, API and JSON storage for email threads
- Creates threads and "identities" in Roundcube
- Sorts email using IMAP folders directly on the server

### Roundcube
- Webmail client using the IMAP server directly
- Email threads are stored as folders on the IMAP server
- Uses MySQL for storage

### Sendgrid (Production only)
- Used to send emails
- Handles copying to the IMAP server

### IMAP Server
- Used to store email threads
- Email threads are organized as folders on the server

### Auth Service (Development only)
- Simple authentication service for development
- Not intended for production use

### GreenMail (Development only)
- SMTP/IMAP server for development environment
- Provides email testing capabilities without external dependencies
- Configured with test accounts for local development

## Capabilities

Main capabilities, but not limited to:
- You can read and analyze PHP code, including understanding class structures, methods, and dependencies
- You can suggest improvements to code organization and email handling logic
- You can help debug IMAP connection and email processing issues
- You can write and modify PHP unit tests
- You can help with Docker configuration and deployment

## Rules

I pledge to follow the custom instructions.

- The current working directory is project root.
- When making changes, avoid unnecessary modifications that would complicate code review (e.g. formatting, variable renaming, etc.)
- After completing work, commit changes with detailed messages explaining what and why. If the "why" is unclear, ask for clarification.
- If commit reason is unclear, ask for clarification
- When viewing git diffs, use git with "no-pager" parameter: git --no-pager diff
- Update relevant documentation in /docs when modifying features. Don't forget to update codebase documentation with changes.
- Keep README.md in sync with new capabilities
- Before and after any tool use, give me a confidence level (0-10) on how the tool use will help the project.

## Commands:

- Run tests using:
    cd organizer/src && ./vendor/bin/phpunit tests/

- Run system using:
    docker-compose -f docker-compose.dev.yaml up -d

- Restart application/service:
    docker-compose -f docker-compose.dev.yaml down && docker-compose -f docker-compose.dev.yaml up -d

- Check processes using:
    docker-compose -f docker-compose.dev.yaml ps

- Get into database:
    docker exec -it email-engine_postgres_1 psql -U offpost -d offpost

## Security

### Sensitive Files

DO NOT read or modify:

-   .env files
-   \*_/config/secrets._
-   \*_/_.pem
-   Any file containing API keys, tokens, or credentials

### Security Practices

-   Never commit sensitive files
-   Use environment variables for secrets
-   Keep credentials out of logs and output

## OpenAI API Integration

### Overview

The system now includes integration with the OpenAI API for summarizing email responses. This feature helps in quickly understanding the content of received emails by providing concise summaries.

### Configuration

To configure the OpenAI API integration, follow these steps:

1. Obtain an API key from OpenAI.
2. Set the API key as an environment variable in your system:
   ```bash
   export OPENAI_API_KEY=your_api_key_here
   ```

### Usage

The `ThreadEmailSummarizer` class uses the `OpenAIClient` to summarize email responses. Here is an example of how to use it:

```php
require_once 'class/ThreadEmailSummarizer.php';

$apiKey = getenv('OPENAI_API_KEY');
$summarizer = new ThreadEmailSummarizer($apiKey);

$emailContent = "Your email content here";
$summary = $summarizer->summarize($emailContent);

echo "Summary: " . $summary;
```

### Running Tests for OpenAI Integration

To run the tests related to the OpenAI API integration, use the following command:

```bash
cd organizer/src && ./vendor/bin/phpunit tests/OpenAIClientTest.php
cd organizer/src && ./vendor/bin/phpunit tests/ThreadEmailSummarizerTest.php
```
