# Offpost - Application to interact with public entities using email

## Norwegian description of service
(kept in sync with README.md in the root directory)

Offpost - Offentlig post - er en tjeneste for å sende e-post til offentlige myndigheter.

Tjenesten baserer seg på at man lager en forespørsel til en myndighet. Denne får en unik profil med tilfeldig navn og epost. Eposten brukes for å sende e-post og å motta svar. De tilfeldige navnene baserer seg på Motorvognregisteret, så det er ekte navn men kombinasjonen av fornavn og etternavn er sannsnyligvis unik siden navene ikke er vektet.

## Architecture
(kept in sync with README.md in the root directory)

Offpost is mainly a PHP application running on a web server. It revolves around email threads sent to public entities.

One email thread is a conversation between the system and a public entity. Or mulitple in case of a complaint.
Connected to the thread is a profile of first name, last name and email address. This is unique for each thread.

It uses IMAP to get emails from a mail server and store them in local storage. The emails are sorted into threads
based on the to/from addresses that matches the profile of the thread.

## Components
(kept in sync with README.md in the root directory)

### Organizer
- Main program that provides client, API and JSON storage for email threads
- Creates threads and "identities" in Roundcube
- Sorts email using IMAP folders directly on the server

### Roundcube
- Webmail client using the IMAP server directly
- Email threads are stored as folders on the IMAP server
- Uses MySQL for storage

### Sendgrid (Production only)
- Used to send emails
- Handles copying to the IMAP server

### IMAP Server
- Used to store email threads
- Email threads are organized as folders on the server

### Auth Service (Development only)
- Simple authentication service for development
- Not intended for production use

### GreenMail (Development only)
- SMTP/IMAP server for development environment
- Provides email testing capabilities without external dependencies
- Configured with test accounts for local development

## Capabilities

Main capabilities, but not limited to:
- You can read and analyze PHP code, including understanding class structures, methods, and dependencies
- You can suggest improvements to code organization and email handling logic
- You can help debug IMAP connection and email processing issues
- You can write and modify PHP unit tests
- You can help with Docker configuration and deployment

## Rules

I pledge to follow the custom instructions.

- The current working directory is project root.
- When making changes, avoid unnecessary modifications that would complicate code review (e.g. formatting, variable renaming, etc.)
- After completing work, commit changes with detailed messages explaining what and why.
- Never stage changes in git. Staging should not be done by Cline.
- When viewing git diffs, use git with "no-pager" parameter: git --no-pager diff
- Update relevant documentation in /docs when modifying features. Don't forget to update codebase documentation with changes.
- Keep README.md in sync with new capabilities
- Before and after any tool use, give me a confidence level (0-10) on how the tool use will help the project.

## Commands:

- Run unit tests using:
    ./organizer/src/vendor/bin/phpunit organizer/src/tests/

- Run e2e tests using:
    ./organizer/src/vendor/bin/phpunit organizer/src/e2e-tests/

- Run all tests (unit + e2e) using:
    ./organizer/src/vendor/bin/phpunit organizer/src/tests/ organizer/src/e2e-tests/

- Run system using:
    docker-compose -f docker-compose.dev.yaml up -d

- If migrations was added:
    See "restart" command below

- Complete reset of database (including recreating test data):
    docker-compose -f docker-compose.dev.yaml rm -s -f -v postgres organizer
    docker volume rm offpost_postgres_data_development
    docker-compose -f docker-compose.dev.yaml up -d
    sleep 5  # Wait for migrations to complete
    docker-compose  -f docker-compose.dev.yaml logs organizer | grep "\\[migrate\\]"

- Rebuild docker images:
    docker-compose -f docker-compose.dev.yaml down && docker-compose -f docker-compose.dev.yaml up --build -d

- Restart application/service:
    docker-compose -f docker-compose.dev.yaml down && docker-compose -f docker-compose.dev.yaml up -d

- Logs from organizer (the main container):
    docker-compose  -f docker-compose.dev.yaml logs organizer

- Check processes using:
    docker-compose -f docker-compose.dev.yaml ps

- Get into database:
    docker exec -it offpost_postgres_1 psql -U offpost -d offpost

## Database

To see the current schema for the database, read organizer/src/migrations/sql/99999-database-schema-after-migrations.sql.

This file is automatically updated when we make new migrations and run them.

## Security

### Sensitive Files

DO NOT read or modify:

-   .env files
-   \*_/config/secrets._
-   \*_/_.pem
-   Any file containing API keys, tokens, or credentials

### Security Practices

-   Never commit sensitive files
-   Use environment variables for secrets
-   Keep credentials out of logs and output


## Testing

Tests should be run after changes are made.

Rules:
- Assert message:
    - Give context to the assertion. But don't add messages telling the same as is asserted.
    - Asserting a size of array should always output the array in the error message. Use json_encode(..., JSON_PRETTY_PRINT).
- Structure tests as the following:
```php
// :: Setup

// :: Act

// :: Assert
```
