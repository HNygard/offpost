name: PHP CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-versions: [8.2]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, intl, imap
        tools: composer:v2

    - name: Validate composer.json
      run: cd organizer/src && composer validate

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(cd organizer/src && composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('organizer/src/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install dependencies
      env:
        COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ secrets.GITHUB_TOKEN }}"}}'
        COMPOSER_PREFER_STABLE: "1"
        COMPOSER_OPTIMIZE_AUTOLOADER: "1"
      run: |
        cd organizer/src
        # Set up Composer configuration for better reliability
        composer config --global github-oauth.github.com ${{ secrets.GITHUB_TOKEN }}
        composer config --global secure-http false
        composer config --global disable-tls false
        composer config --global repos.packagist composer https://packagist.org
        # Install with settings optimized for CI environment
        composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader --verbose

    - name: Create OpenAI API key file
      run: |
        mkdir -p ./secrets
        echo "# This is a placeholder for the OpenAI API key" > ./secrets/openai_api_key
        echo "sk-placeholder-api-key-not-real" >> ./secrets/openai_api_key
        
    - name: Start Docker compose (organizer, postgres, greenmail, auth)
      run: docker compose -f docker-compose.dev.yaml up -d greenmail postgres organizer auth

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if docker exec $(docker ps -q -f name=postgres) pg_isready -U offpost; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Retrying in 1 second..."
          sleep 1
        done

    - name: Wait for migrations
      run: |
        timeout=60
        until docker exec offpost-organizer-1 php /php-frontend/migrations/migrate.php || [ $timeout -eq 0 ]; do
          echo "Waiting for migrations to complete..."
          sleep 5
          ((timeout-=5))
        done
        if [ $timeout -eq 0 ]; then
          echo "Migration verification timed out"
          exit 1
        fi

    - name: Run unit tests
      run: cd organizer/src && vendor/bin/phpunit --exclude-group integration tests

    - name: Run e2e tests
      run: cd organizer/src && vendor/bin/phpunit e2e-tests/
